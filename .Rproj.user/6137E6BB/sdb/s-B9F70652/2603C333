{
    "contents" : "##http://cnr.lwlss.net/GarminR/\n# Read in xml files from Garmin ForeRunner\nlibrary(XML)\nsetwd(\"GPX\")\nfilename=\"activity_61755378\"\n\n\ndoc=xmlParse(paste(filename,\".gpx\",sep=\"\"),useInternalNodes=TRUE)\n\n# We need to extract the simple tree structure containing \n# the data which we can pass to xmlToDataFrame\ntop=xmlRoot(doc)\ntitle=toString.XMLNode(top[[2]][[1]][[1]])\n\ndescription=toString.XMLNode(top[[2]][[2]][[1]])\ndata=toString.XMLNode(top[[2]][[3]])\n# All these tests in case description node is empty!\n# When it is, data node is moved up one\n# Really need to access nodes by name, but can't see how...\nif(data==\"NULL\") data=toString.XMLNode(top[[2]][[2]])\nif(data==\"NULL\") data=toString.XMLNode(top[[2]][[1]])\n\n# Fill a data frame with interesting data\ndf=as.data.frame(xmlToDataFrame(data,c(\"numeric\", \"character\", \"integer\")))\n#Get the attributes of the XMLNode\nif(toString.XMLNode(top[[2]][[3]])==\"NULL\") {\n if(toString.XMLNode(top[[2]][[2]])==\"NULL\") {\n  attribs=xmlSApply(top[[2]][[1]],xmlAttrs)\n }else{\n  attribs=xmlSApply(top[[2]][[2]],xmlAttrs)\n }\n}else{\n attribs=xmlSApply(top[[2]][[3]],xmlAttrs)\n}\n\ndf$lon=as.numeric(attribs[1,])\ndf$lat=as.numeric(attribs[2,])\ncolnames(df)=c(\"Elevation\",\"DateTime\",\"HeartRate\",\"Longitude\",\"Latitude\")\nhead(df)\ndf$Elevation=as.numeric(df$Elevation)\ndf$HeartRate=as.integer(df$HeartRate)\ndf$DateTime=as.character(df$DateTime)\n# Convert timestamp to number of seconds since start of run\nhead(df)\ndate=substr(df$DateTime[1],1,10)\nTime=substr(df$DateTime,12,19)\nT0=strptime(Time[1],\"%H:%M:%S\")\nTime=as.numeric(strptime(Time,\"%H:%M:%S\")-T0)\ndf$Seconds=Time\n\n# Initialise columns\ndf$dNorth=0; df$dEast=0; df$dUp=0;\ndf$North=0; df$East=0; df$dDist=0; \ndf$dDist2D=0; df$Dist2D=0\nhead(df)\n\n\n# Haversine formula is appropriate for calculating distances from lat/long\n## Useful link: http://www.movable-type.co.uk/scripts/latlong.html\nEarthRad=6371000\nhaverDist<-function(aLong,aLat,bLong,bLat){\n dLat=2*pi*(bLat-aLat)/360.0; dLon=2*pi*(bLong-aLong)/360.0\n a=(sin(dLat/2))^2+cos(2*pi*aLat/360)*cos(2*pi*bLat/360)*(sin(dLon/2)^2)\n return(EarthRad*2*atan2(sqrt(a),sqrt(1-a)))\n}\nhead(df)\n# Calculate northings and eastings\ndf$East=haverDist(df[1,\"Longitude\"],df[1,\"Latitude\"],df$Longitude,df[1,\"Latitude\"])*sign(df$Longitude-df[1,\"Longitude\"])\ndf$North=haverDist(df[1,\"Longitude\"],df[1,\"Latitude\"],df[1,\"Longitude\"],df$Latitude)*sign(df$Latitude-df[1,\"Latitude\"])\n\n# Calculate changes in position for each dt\nfor (x in 2:(length(df$DateTime)-1)) {\n sEast=sign(df[x,\"Longitude\"]-df[1,\"Longitude\"])\n sNorth=sign(df[x,\"Latitude\"]-df[1,\"Latitude\"])\n df$dEast[x]=sEast*haverDist(df[x-1,\"Longitude\"],df[1,\"Latitude\"],df[x,\"Longitude\"],df[1,\"Latitude\"])\n df$dNorth[x]=sNorth*haverDist(df[1,\"Longitude\"],df[x-1,\"Latitude\"],df[1,\"Longitude\"],df[x,\"Latitude\"])\n df$dUp[x]=df$Elevation[x]-df$Elevation[x-1]\n # 2D distance (ignoring hills)\n df$dDist2D[x]=haverDist(df[x-1,\"Longitude\"],df[x-1,\"Latitude\"],df[x,\"Longitude\"],df[x,\"Latitude\"])\n}\n\ndf$dDist=sqrt(df$dNorth^2+df$dEast^2+df$dUp^2)\ndf$Dist=cumsum(df$dDist)\ndf$Dist2D=cumsum(df$dDist2D)\ntail(df)\n# Fit a spline function to the GPS coordinates & elevation\neast=splinefun(df$Seconds,df$East)\nnorth=splinefun(df$Seconds,df$North)\nup=splinefun(df$Seconds,df$Elevation)\ndist=splinefun(df$Seconds,df$Dist)\nhr=approxfun(df$Seconds,df$HeartRate) # Some gaps in heart rate record, linear interpolation more robust\n\n\n# Do finite centred differencing to give smoothest rate/gradient estimates\ndf$Speed=rep(0,length(df$Seconds))\ndf$Gradient=rep(0,length(df$Seconds))\nfor(x in 2:(length(df$Seconds)-1)){\n Dt=df[x+1,\"Seconds\"]-df[x-1,\"Seconds\"]\n Dd=df[x+1,\"Dist\"]-df[x-1,\"Dist\"]\n df[x,\"Speed\"]=Dd/Dt # m/s\n df[x,\"Gradient\"]=(df[x+1,\"Elevation\"]-df[x-1,\"Elevation\"])/Dd # m/m\n}\n\ndf[1,\"Speed\"]=df[2,\"Speed\"]\ndf[length(df$Seconds),\"Speed\"]=df[length(df$Seconds)-1,\"Speed\"]\ndf[1,\"Gradient\"]=df[2,\"Gradient\"]\ndf[length(df$Seconds),\"Gradient\"]=df[length(df$Seconds)-1,\"Gradient\"]\ntail(df)\n\nmean(df$Speed)\n\n# Smooth speed as it is unrealistically noisy\ndf$Speed=smooth(df$Speed)\n\n# Fit a spline function to rate\nspeed=splinefun(df$Seconds,df$Speed)\npace<-function(t) sapply(1/speed(t),max,0)\nppace<-function(t) 1000*pace(t)/60\n\n# Update dataframe with speed and pace\ndf$Speed=speed(df$Seconds)\ndf$Pace=pace(df$Seconds)\ntail(df)\nmean(df$Speed)\n\n#######################################Plots########\n# Generate some plots\nreportfile=paste(title,filename,\".pdf\",sep=\"\")\nprint(paste(\"Building\",reportfile))\npdf(reportfile)\n\n# Generate time interpolation points\nNum=2001\nminT=0; maxT=max(df$Seconds)\ninterT=minT+(maxT-minT)*(0:Num)/Num\n\n# Create a colour function for plots\ncolfunc=colorRampPalette(c(\"navy\",\"white\", \"red3\"),space=\"Lab\")\ncp=colfunc(500)\ngetCol<-function(colFrac) cp[1+round(499*colFrac)]\n\n# Generate fractional variables for colouring plots\nhrFrac=(hr(interT)-min(hr(interT)))/(max(hr(interT))-min(hr(interT)))\nupFrac=(up(interT)-min(up(interT)))/(max(up(interT))-min(up(interT)))\npmax=min(c(60*7/1000,max(pace(interT)))) # Else scales ruined by stopping and walking\npFrac=(pace(interT)-min(pace(interT)))/(pmax-min(pace(interT)))\n\n# Calculate Color Scales\nhrLevels=min(hr(interT))+(1:length(cp))*(max(hr(interT))-min(hr(interT)))/length(cp)\nupLevels=min(up(interT))+(1:length(cp))*(max(up(interT))-min(up(interT)))/length(cp)\npmax=min(c(7,max(ppace(interT)))) # Else scales ruined by stopping and walking\npLevels=min(ppace(interT))+(1:length(cp))*(pmax-min(ppace(interT)))/length(cp)\n\n# Make a plotting dataframe, calculate displacement during each timestep\nplt=data.frame(time=interT,east=east(interT),north=north(interT),up=up(interT),hr=hr(interT),distance=sapply(interT,dist),speed=speed(interT),pace=pace(interT))\n\n# Elevation trace\nlayout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))\nplot(NULL,xlab=\"East (m)\",ylab=\"North (m)\",xlim=c(min(df$East),max(df$East)),ylim=c(min(df$North),max(df$North)),main=paste(title,date))\nrect(par(\"usr\")[1], par(\"usr\")[3], par(\"usr\")[2], par(\"usr\")[4], col = \"grey\")\npoints(east(interT),north(interT),pch=16,cex=0.6,col=getCol(upFrac))\n# Draw legend\nimage(1, upLevels,matrix(data=upLevels, ncol=length(upLevels),nrow=1),col=cp,xlab=\"\",ylab=\"Elevation (m)\",xaxt=\"n\")\nlayout(1)\n\n# Heart rate trace\nlayout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))\nplot(NULL,xlab=\"East (m)\",ylab=\"North (m)\",xlim=c(min(df$East),max(df$East)),ylim=c(min(df$North),max(df$North)),main=paste(title,date))\nrect(par(\"usr\")[1], par(\"usr\")[3], par(\"usr\")[2], par(\"usr\")[4], col = \"grey\")\npoints(east(interT),north(interT),pch=16,cex=0.6,col=getCol(hrFrac))\n# Draw legend\nimage(1, hrLevels,matrix(data=hrLevels, ncol=length(hrLevels),nrow=1),col=cp,xlab=\"\",ylab=\"Heart Rate (bpm)\",xaxt=\"n\")\nlayout(1)\n\n# Pace trace\nlayout(matrix(data=c(1,2), nrow=1, ncol=2), widths=c(4,1), heights=c(1,1))\nplot(NULL,xlab=\"East (m)\",ylab=\"North (m)\",xlim=c(min(df$East),max(df$East)),ylim=c(min(df$North),max(df$North)),main=paste(title,date))\nrect(par(\"usr\")[1], par(\"usr\")[3], par(\"usr\")[2], par(\"usr\")[4], col = \"grey\")\npoints(east(interT),north(interT),pch=16,cex=0.6,col=getCol(pFrac))\n# Draw legend\nimage(1, pLevels,matrix(data=pLevels, ncol=length(pLevels),nrow=1),col=cp,xlab=\"\",ylab=\"Pace (min/km)\",xaxt=\"n\")\nlayout(1)\n\n#####\nop<-par(mfrow=c(2,2))\n\n# Elevation timecourse\nplot(df$Seconds/60,df$Elevation,xlab=\"Time (min)\",ylab=\"Elevation (m)\",type=\"l\",lwd=2,col=\"red\")\n\n# Heart rate timecourse\nplot(df$Seconds/60,df$HeartRate,xlab=\"Time (min)\",ylab=\"Heart Rate (bpm)\",type=\"l\",lwd=2,col=\"red\")\n\n# Distance timecourse\n#plot(df$Seconds/60,df$Dist/1000,xlab=\"Time (min)\",ylab=\"Distance (km)\",type=\"l\",lwd=2,col=\"red\")\n\n# Speed timecourse\nplot(df$Seconds/60,60*df$Speed/1000,xlab=\"Time (min)\",ylab=\"Speed (km/min)\",type=\"l\",lwd=2,col=\"red\")\n\n# Pace timecourse\npmin=max(0,1000*min(df$Pace)/60)\npmax=min(7,1000*max(df$Pace)/60)\nplot(df$Seconds/60,1000*df$Pace/60,xlab=\"Time (min)\",ylab=\"Pace (min/km)\",type=\"l\",lwd=2,col=\"red\",ylim=c(pmin,pmax))\ntitle(\"Performance statistics with time (min)\",line=-2,outer=TRUE)\npar(op)\n\n#####\nop<-par(mfrow=c(2,2))\n\n# Elevation timecourse\nplot(df$Dist/1000,df$Elevation,xlab=\"Distance (km)\",ylab=\"Elevation (m)\",type=\"l\",lwd=3,col=\"blue\")\n\n# Heart rate timecourse\nplot(df$Dist/1000,df$HeartRate,xlab=\"Distance (km)\",ylab=\"Heart Rate (bpm)\",type=\"l\",lwd=2,col=\"blue\")\n\n# Distance timecourse\n#plot(df$Dist/1000,df$Dist/1000,xlab=\"Distance (km)\",ylab=\"Distance (km)\",type=\"l\",lwd=2,col=\"blue\")\n\n# Speed timecourse\nplot(df$Dist/1000,60*df$Speed/1000,xlab=\"Distance (km)\",ylab=\"Speed (km/min)\",type=\"l\",lwd=2,col=\"blue\")\n\n# Pace timecourse\npmin=max(0,1000*min(df$Pace)/60)\npmax=min(7,1000*max(df$Pace)/60)\nplot(df$Dist/1000,1000*df$Pace/60,xlab=\"Distance (km)\",ylab=\"Pace (min/km)\",type=\"l\",lwd=2,col=\"blue\",ylim=c(pmin,pmax))\ntitle(\"Performance statistics with distance (km)\",line=-2,outer=TRUE)\npar(op)\n\n#####\nop<-par(mfrow=c(1,2))\n\nhist(1000*plt$pace/60,breaks=21,xlab=\"Pace (min/km)\",ylab=\"Frequency\",main=\"\")\nhist(plt$hr,breaks=61,xlab=\"Heart Rate (bpm)\",ylab=\"Frequency\",main=\"\")\n\ntitle(\"Frequency histograms\",line=-2,outer=TRUE)\npar(op)\n\n#####\nop<-par(mfrow=c(2,2))\n\n# Pace gradient correlation\ngpCor=formatC(cor(df$Gradient,1000*df$Pace/60), digits=4)\nplot(df$Gradient,1000*df$Pace/60,col=\"red\",pch=16,xlab=\"Gradient\",ylab=\"Pace (min/km)\",main=paste(\"Correlation:\",gpCor))\n\n# Heart-rate gradient correlation\n# need to strip out warming up period\nminHR=mean(df$HeartRate)-1.98*sd(df$HeartRate)\ntimes=df$Seconds[df$HeartRate>=minHR]\nmint=min(times)\ndfHR=df[df$Seconds>mint,]\ngpCor=formatC(cor(dfHR$Gradient,dfHR$HeartRate), digits=4)\nplot(dfHR$Gradient,dfHR$HeartRate,col=\"red\",pch=16,xlab=\"Gradient\",ylab=\"Heart Rate (bpm)\",main=paste(\"Correlation:\",gpCor))\n\n# Pace time correlation\ngpCor=formatC(cor(df$Seconds,1000*df$Pace/60), digits=4)\nplot(df$Seconds,1000*df$Pace/60,col=\"red\",pch=16,xlab=\"Time (s)\",ylab=\"Pace (min/km)\",main=paste(\"Correlation:\",gpCor),\n     ylim=c(1000*min(df$Pace)/60,min(c(7,1000*max(df$Pace)/60))))\n\n# Heart-rate time correlation\ngpCor=formatC(cor(dfHR$Seconds,dfHR$HeartRate), digits=4)\nplot(dfHR$Seconds,dfHR$HeartRate,col=\"red\",pch=16,xlab=\"Time (s)\",ylab=\"Heart Rate (bpm)\",main=paste(\"Correlation:\",gpCor))\n\npar(op)\n\ndev.off()",
    "created" : 1379448734742.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3301136105",
    "id" : "2603C333",
    "lastKnownWriteTime" : 1379458025,
    "path" : "~/Rwork1/GitLocal/R_as_Gi_FRS/Garmin_example.R",
    "properties" : {
        "tempName" : "Untitled5"
    },
    "source_on_save" : false,
    "type" : "r_source"
}