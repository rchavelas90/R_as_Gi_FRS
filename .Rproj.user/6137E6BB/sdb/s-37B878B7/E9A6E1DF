{
    "contents" : "##http://plotkml.r-forge.r-project.org/gpxbtour.html\n\nlibrary(XML)\nreadGPX <- function(\n gpx.file,\n metadata = TRUE,\n bounds = TRUE,\n waypoints = TRUE, \n tracks = TRUE,  \n routes = TRUE   \n)\n \n{    \n options(warn = -1)    \n \n if(metadata==TRUE) { metadata <- .readGPX.element(gpx.file, \"name\") }    \n if(bounds==TRUE) { bounds <- .readGPX.element(gpx.file, \"bounds\") }    \n if(waypoints==TRUE) { waypoints <- .readGPX.element(gpx.file, \"wpt\") }\n if(tracks==TRUE) { tracks <- .readGPX.element(gpx.file, \"trk\") }\n if(routes==TRUE) { routes <- .readGPX.element(gpx.file, \"rte\") }\n \n gpx <- list(metadata=metadata, bounds=bounds, waypoints=waypoints, tracks=tracks, routes=routes)\n return(gpx)\n}\n\n## Read various elements from a *.gpx file:\n\n.readGPX.element <- function(gpx.file, element) {\n # element = \"metadata\", \"wpt\", \"rte\", \"trk\"\n \n ret <- xmlTreeParse(gpx.file, useInternalNodes = TRUE)\n # top structure: \n top <- xmlRoot(ret)\n \n # check if there is any content:\n if(any(grep(element, names(top)))) {\n  \n  # tracks:\n  if(element==\"trk\"){   \n   ret <- NULL\n   nu <- which(names(top) %in% element)\n   for(c in seq_along(nu)){\n    lst <- which(names(top[[nu[c]]]) %in% \"trkseg\")\n    nm <- names(top[[nu[c]]][[lst[1]]][[1]])\n    ret[[c]] <- list(NULL)\n    for(i in seq_along(lst)) {\n     trkpt <- top[[nu[c]]][[lst[i]]]\n     ret[[c]][[i]] <- data.frame(NULL)\n     ## get columns (http://www.topografix.com/GPX/1/1/#type_wptType)\n     lon <- as.numeric(xmlSApply(trkpt, xmlGetAttr, \"lon\"))\n     lat <- as.numeric(xmlSApply(trkpt, xmlGetAttr, \"lat\"))\n     ret[[c]][[i]][1:length(lon),\"lon\"] <- lon\n     ret[[c]][[i]][1:length(lat),\"lat\"] <- lat\n     if(!nm[[1]]==\"NULL\"){\n      for(j in 1:length(nm)){\n       xm <- as.character(sapply(sapply(xmlChildren(trkpt), function(x) x[[nm[[j]]]]), xmlValue))\n       ret[[c]][[i]][1:length(xm), nm[[j]]] <- xm \n      }\n     } \n    }\n    names(ret[[c]]) <- xmlValue(top[[nu[c]]][[\"name\"]])\n   }   \n  }\n  \n  if(element==\"wpt\"){\n   ret <- data.frame(NULL)\n   nu <- which(names(top) %in% element)\n   nm <- names(top[[nu[1]]])\n   for(i in seq_along(nu)) {\n    # coordinates:\n    ret[i, \"lon\"] <- as.numeric(xmlGetAttr(top[[nu[i]]], \"lon\"))\n    ret[i, \"lat\"] <- as.numeric(xmlGetAttr(top[[nu[i]]], \"lat\"))\n    if(!nm[[1]]==\"NULL\"){\n     for(j in 1:length(nm)){\n      ret[i, nm[[j]]] <- xmlValue(xmlChildren(top[[nu[i]]])[[nm[[j]]]])\n     }  \n    }\n   }\n  }\n  \n  if(element==\"rte\"){\n   ret <- NULL\n   nu <- which(names(top) %in% element)\n   for(c in seq_along(nu)){\n    ret[[c]] <- data.frame(NULL)\n    lst <- which(names(top[[nu[c]]]) %in% \"rtept\")\n    nm <- names(top[[nu[c]]][[lst[1]]])\n    for(i in seq_along(lst)) {\n     rtept <- top[[nu[c]]][[lst[i]]]\n     ret[[c]][i, \"lon\"] <- as.numeric(xmlGetAttr(rtept, \"lon\"))\n     ret[[c]][i, \"lat\"] <- as.numeric(xmlGetAttr(rtept, \"lat\"))\n     if(!nm[[1]]==\"NULL\"){\n      for(j in c(\"name\",\"cmt\",\"desc\",\"sym\",\"type\")){\n       try(ret[[c]][i, j] <- xmlValue(rtept[[j]]), silent = TRUE)\n      }\n     } \n    }\n    names(ret)[c] <- xmlValue(top[[nu[c]]][[\"name\"]])\n   }\n  }\n  \n  # bounds\n  if(element==\"bounds\"){\n   nu <- which(names(top) %in% element)\n   ret <- matrix(rep(NA, 4), nrow=2, dimnames = list(c(\"lat\", \"lon\"), c(\"min\", \"max\")))\n   # coordinates:\n   ret[1,1] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"minlon\"))\n   ret[1,2] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"maxlon\"))\n   ret[2,1] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"minlat\"))\n   ret[2,2] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"maxlat\"))\n  }\n  \n  # metadata\n  if(element==\"name\"){\n   lst <- c(\"name\",\"desc\",\"author\",\"email\",\"url\",\"urlname\",\"time\")\n   nu <- which(names(top) %in% lst)\n   if(!nu[[1]]==\"NULL\"){      \n    ret <- data.frame(NULL)\n    for(i in seq_along(lst)) {\n     try(ret[1,lst[i]] <- xmlValue(top[[nu[[i]]]]), silent = TRUE)\n    }\n   }\n  }\n  \n }\n else { ret <- NULL }\n \n return(ret)\n}\n\n# enf of script;\ngetwd()\ndata <- readGPX(\"2013_09_13T132422Z.gpx\",metadata=F,bounds=F,waypoints=F,route=F)\nsetwd(\"GPX\")\n\nstr(data)\nstr(data$tracks)\ndata2 <- data$tracks[[1]]$`GPX Master Track - 13/09/2013 08:24`\nhead(data2)\nhead(data2$time)\ndata2$delta <- c()\ndata2$time <- as.POSIXct(data2$time, format=\"%Y-%m-%dT%H:%M:%SZ\")\nplot(data2$lat,data2$lon)\ndata2$loc=paste(data2$lat,data2$lon,sep=\":\")\n\nlibrary(RgoogleMaps)\nMyMap <- MapBackground(lat=data2$lat,lon=data2$lon)\nPlotOnStaticMap(MyMap=MyMap,lat=data2$lat,lon=data2$lon,FUN=lines,destfile=\"ejm.png\")\n\n\nlibrary(googleVis)\ng <- gvisGeoChart(data2,\"loc\",options=list(region=\"MX\"))\nplot(g)\ngvisGe\n\nhead(data2)\ng2 <- gvisMap(data2,\"loc\",options=list(showLine=TRUE))\nplot(g2)",
    "created" : 1379442917627.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "12|1|23|0|\n27|49|128|0|\n",
    "hash" : "75535144",
    "id" : "E9A6E1DF",
    "lastKnownWriteTime" : 1379449933,
    "path" : "~/Rwork1/GitLocal/R_as_Gi_FRS/gpx_to_dataframe.R",
    "properties" : {
        "tempName" : "Untitled4"
    },
    "source_on_save" : false,
    "type" : "r_source"
}